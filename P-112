{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyML0hfU668/F0ITLTkJjyVu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ketan0608/C-103/blob/main/P-112\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YNM9kMg2TCQq"
      },
      "outputs": [],
      "source": [
        "from google.colab import files\n",
        "file_to_load=files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.figure_factory as ff\n",
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "import statistics\n",
        "import csv\n",
        "import plotly.express as px\n",
        "df=pd.read_csv('dataC-112.csv')\n",
        "fig=px.scatter(df,y='quant_saved',color='rem_any')\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "5uqT2G3ZTVPb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open('dataC-112.csv',newline='') as f:\n",
        "  reader=csv.reader(f)\n",
        "  saving_data=list(reader)\n",
        "saving_data.pop(0)\n",
        "total_entries=len(saving_data)\n",
        "total_people_given_reminder=0\n",
        "for data in saving_data:\n",
        "  if int(data[3])==1:\n",
        "    total_people_given_reminder+=1\n",
        "fig=go.Figure(go.Bar(x=['Reminded','NoT Reminded'],y=[total_people_given_reminder,(total_entries-total_people_given_reminder)]))\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "nBif3UpeTVSQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "All_savings=[]\n",
        "for data in saving_data:\n",
        "  All_savings.append(float(data[0]))\n",
        "print(f\"mean of savings-{statistics.mean(All_savings)}\")\n",
        "print(f\"median of savings-{statistics.median(All_savings)}\")\n",
        "print(f\"mode of savings-{statistics.mode(All_savings)}\")\n",
        "print(f\"mode of savings-{statistics.stdev(All_savings)}\")"
      ],
      "metadata": {
        "id": "YDmeLRfJTVVN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reminded_savings=[]\n",
        "not_reminded_savings=[]\n",
        "for data in saving_data:\n",
        "  if int(data[3])==1:\n",
        "    reminded_savings.append(float(data[0]))\n",
        "  else:\n",
        "    not_reminded_savings.append(float(data[0]))\n",
        "print('Result of people whon were given reminder:')\n",
        "print(f\"mean of savings-{statistics.mean(reminded_savings)}\")\n",
        "print(f\"median of savings-{statistics.median(reminded_savings)}\")\n",
        "print(f\"mode of savings-{statistics.mode(reminded_savings)}\")\n",
        "print(f\"mode of savings-{statistics.stdev(reminded_savings)}\")\n",
        "print('Result of people whon were given not reminder:')\n",
        "print(f\"mean of savings-{statistics.mean(not_reminded_savings)}\")\n",
        "print(f\"median of savings-{statistics.median(not_reminded_savings)}\")\n",
        "print(f\"mode of savings-{statistics.mode(not_reminded_savings)}\")\n",
        "print(f\"mode of savings-{statistics.stdev(not_reminded_savings)}\")"
      ],
      "metadata": {
        "id": "EBag_DiNT9HW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}